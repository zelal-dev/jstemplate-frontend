import { lastIndexOf } from 'lodash'
import React, { Fragment } from 'react'

const Works = ({ colors, data }: { colors: any; data: any }) => {
  return (
    <div className="container mx-auto">
      <div className="xl:py-24 sm:py-16 py-14 flex flex-col items-center justify-center">
        <h1 className="2xl:text-4xl xl:text-3xl lg:text-2xl md:text-xl sm:text-lg text-base font-bold lg:mt-4 sm:mt-3 mt-2 text-gray-900">
          {data ? data.title : 'Heading Title'}
        </h1>
        <article className="mt-5 text-gray-600 max-w-2xl w-11/12 text-center xl:text-lg md:text-base text-sm">
          {data ? data.description : 'Description'}
        </article>
        <div className="mt-16 grid lg:grid-cols-12 md:grid-cols-1 gap-16 container mx-auto px-5 sm:px-0">
          {data
            ? data.items.map((item: any, index: number) => (
                <Fragment key={index}>
                  {index % 2 === 0 ? (
                    <Fragment>
                      <div className="lg:col-span-7">
                        <WorksCart item={item} colors={colors} />
                      </div>
                      <div className={`lg:col-span-5 hidden lg:block`}>
                        {/* do not show last item  */}
                        {data.items.length - 1 !== index && (
                          <div className="flex items-end h-full">
                            <Arrow className={`${colors.textPrimary}`} />
                          </div>
                        )}
                      </div>
                    </Fragment>
                  ) : (
                    <Fragment>
                      <div className="lg:col-span-5 hidden lg:block">
                        <div className="flex items-end h-full">
                          <Arrow2 className={`${colors.textPrimary}`} />
                        </div>
                      </div>
                      <div className="lg:col-span-7">
                        <WorksCart item={item} colors={colors} />
                      </div>
                    </Fragment>
                  )}
                </Fragment>
              ))
            : 'Items'}

          {/* <div className="lg:col-span-5 hidden lg:block">
            <div className="flex justify-end items-end h-full">
              <Arrow2 className={`${colors.textPrimary}`} />
            </div>
          </div>
          <div className="lg:col-span-7">
            <WorksCart colors={colors} />
          </div> */}
        </div>
      </div>
    </div>
  )
}

function Arrow({ className }: { className: string }) {
  return (
    <svg
      width="286"
      height="184"
      viewBox="0 0 286 184"
      fill="currentColor"
      xmlns="http://www.w3.org/2000/svg"
      className={className}
    >
      <path
        d="M10 5L0 0.226497V11.7735L10 7V5ZM280 105.72H281V105.711L281 105.702L280 105.72ZM280 184L285.773 174H274.227L280 184ZM5.98664 7H9.97774V5H5.98664V7ZM13.9688 7H17.9599V5H13.9688V7ZM21.951 7H25.9421V5H21.951V7ZM29.9332 7H33.9243V5H29.9332V7ZM37.9154 7H41.9065V5H37.9154V7ZM45.8976 7H49.8887V5H45.8976V7ZM53.8798 7H57.8709V5H53.8798V7ZM61.862 7H65.8531V5H61.862V7ZM69.8442 7H73.8353V5H69.8442V7ZM77.8264 7H81.8175V5H77.8264V7ZM85.8086 7H89.7997V5H85.8086V7ZM93.7908 7H97.7819V5H93.7908V7ZM101.773 7H105.764V5H101.773V7ZM109.755 7H113.746V5H109.755V7ZM117.737 7H121.728V5H117.737V7ZM125.72 7H129.711V5H125.72V7ZM133.702 7H137.693V5H133.702V7ZM141.684 7H145.675V5H141.684V7ZM149.666 7H153.657V5H149.666V7ZM157.648 7H161.639V5H157.648V7ZM165.63 7H169.622V5H165.63V7ZM173.613 7H175.608V5H173.613V7ZM175.608 7C176.291 7 176.97 7.00463 177.645 7.01384L177.672 5.01402C176.988 5.00469 176.3 5 175.608 5V7ZM181.642 7.12347C182.995 7.17957 184.331 7.25452 185.649 7.3478L185.79 5.35279C184.452 5.25811 183.097 5.18208 181.724 5.12519L181.642 7.12347ZM189.613 7.68844C190.964 7.82545 192.297 7.98224 193.61 8.1582L193.876 6.17591C192.541 5.99707 191.187 5.83779 189.814 5.69864L189.613 7.68844ZM197.54 8.75077C198.876 8.97519 200.192 9.21999 201.488 9.48448L201.888 7.5249C200.569 7.2557 199.23 7.00664 197.871 6.77839L197.54 8.75077ZM205.387 10.354C206.69 10.6698 207.972 11.006 209.233 11.362L209.776 9.43725C208.491 9.07444 207.185 8.73184 205.858 8.41023L205.387 10.354ZM213.073 12.5279C214.351 12.9436 215.606 13.3802 216.838 13.8367L217.533 11.9613C216.275 11.4954 214.995 11.05 213.692 10.626L213.073 12.5279ZM220.539 15.2955C221.783 15.8162 223.003 16.3579 224.199 16.9195L225.05 15.1092C223.828 14.5354 222.582 13.9822 221.311 13.4504L220.539 15.2955ZM227.771 18.6925C228.956 19.3135 230.116 19.9547 231.251 20.615L232.257 18.8862C231.096 18.2111 229.91 17.5556 228.699 16.9209L227.771 18.6925ZM234.658 22.6999C235.786 23.426 236.889 24.1715 237.965 24.9351L239.122 23.3039C238.021 22.5229 236.894 21.7605 235.74 21.018L234.658 22.6999ZM241.162 27.3135C242.216 28.1354 243.244 28.9752 244.245 29.8315L245.545 28.3115C244.521 27.4358 243.47 26.5769 242.392 25.7363L241.162 27.3135ZM247.218 32.4921C248.195 33.4074 249.146 34.3389 250.07 35.285L251.501 33.8875C250.556 32.9204 249.584 31.9681 248.585 31.0321L247.218 32.4921ZM252.794 38.1993C253.686 39.1958 254.55 40.206 255.388 41.2283L256.935 39.9605C256.079 38.9163 255.196 37.8842 254.285 36.866L252.794 38.1993ZM257.849 44.3646C258.652 45.4342 259.429 46.5149 260.179 47.6048L261.826 46.4709C261.061 45.3586 260.268 44.2555 259.448 43.1635L257.849 44.3646ZM262.377 50.9419C263.091 52.0752 263.778 53.2164 264.439 54.3637L266.172 53.3652C265.498 52.1955 264.797 51.0317 264.069 49.8756L262.377 50.9419ZM266.366 57.8633C266.99 59.0497 267.588 60.2404 268.159 61.4335L269.963 60.5699C269.381 59.3545 268.772 58.1413 268.137 56.9323L266.366 57.8633ZM269.817 65.0678C270.352 66.2989 270.86 67.5303 271.342 68.7599L273.204 68.0298C272.713 66.7782 272.196 65.5246 271.652 64.2711L269.817 65.0678ZM272.734 72.5039C273.181 73.7736 273.6 75.0389 273.994 76.2974L275.903 75.7001C275.502 74.4197 275.075 73.1322 274.621 71.8402L272.734 72.5039ZM275.122 80.1354C275.481 81.4381 275.812 82.7304 276.116 84.0095L278.062 83.5463C277.752 82.2449 277.415 80.9301 277.051 79.6049L275.122 80.1354ZM276.974 87.9143C277.241 89.2438 277.48 90.5549 277.691 91.8443L279.665 91.5205C279.45 90.2075 279.207 88.8728 278.934 87.5198L276.974 87.9143ZM278.265 95.7966C278.436 97.1555 278.576 98.4839 278.686 99.7772L280.679 99.6068C280.566 98.2866 280.424 96.9318 280.249 95.5469L278.265 95.7966ZM278.941 103.768C278.969 104.437 278.989 105.094 279 105.738L281 105.702C280.988 105.042 280.968 104.37 280.94 103.685L278.941 103.768ZM279 105.72V107.677H281V105.72H279ZM279 111.591V115.505H281V111.591H279ZM279 119.419V123.333H281V119.419H279ZM279 127.247V131.161H281V127.247H279ZM279 135.075V138.989H281V135.075H279ZM279 142.903V146.817H281V142.903H279ZM279 150.731V154.645H281V150.731H279ZM279 158.559V162.473H281V158.559H279ZM279 166.387V170.301H281V166.387H279ZM279 174.215V178.129H281V174.215H279Z"
        fill="currentColor"
      />
    </svg>
  )
}

function Arrow2({ className }: { className: string }) {
  return (
    <svg
      width="286"
      height="184"
      viewBox="0 0 286 184"
      fill="currentColor"
      xmlns="http://www.w3.org/2000/svg"
      className={className}
    >
      <path
        d="M276 5L286 0.226497V11.7735L276 7V5ZM6 105.72H5V105.711L5.00015 105.702L6 105.72ZM6 184L0.226501 174H11.7735L6 184ZM280.013 7H276.022V5H280.013V7ZM272.031 7H268.04V5H272.031V7ZM264.049 7H260.058V5H264.049V7ZM256.067 7H252.076V5H256.067V7ZM248.085 7H244.093V5H248.085V7ZM240.102 7H236.111V5H240.102V7ZM232.12 7H228.129V5H232.12V7ZM224.138 7H220.147V5H224.138V7ZM216.156 7H212.165V5H216.156V7ZM208.174 7H204.183V5H208.174V7ZM200.191 7H196.2V5H200.191V7ZM192.209 7H188.218V5H192.209V7ZM184.227 7H180.236V5H184.227V7ZM176.245 7H172.254V5H176.245V7ZM168.263 7H164.272V5H168.263V7ZM160.28 7H156.289V5H160.28V7ZM152.298 7H148.307V5H152.298V7ZM144.316 7H140.325V5H144.316V7ZM136.334 7H132.343V5H136.334V7ZM128.352 7H124.361V5H128.352V7ZM120.37 7H116.378V5H120.37V7ZM112.387 7H110.392V5H112.387V7ZM110.392 7C109.709 7 109.03 7.00463 108.355 7.01384L108.328 5.01402C109.012 5.00469 109.7 5 110.392 5V7ZM104.358 7.12347C103.005 7.17957 101.669 7.25452 100.351 7.3478L100.21 5.35279C101.548 5.25811 102.903 5.18208 104.276 5.12519L104.358 7.12347ZM96.3874 7.68844C95.0358 7.82545 93.7034 7.98224 92.39 8.1582L92.1244 6.17591C93.4593 5.99707 94.813 5.83779 96.1857 5.69864L96.3874 7.68844ZM88.4601 8.75077C87.1237 8.97519 85.8078 9.21999 84.5123 9.48448L84.1123 7.5249C85.4309 7.2557 86.7696 7.00664 88.1288 6.77839L88.4601 8.75077ZM80.6132 10.354C79.3098 10.6698 78.028 11.006 76.7674 11.362L76.2239 9.43725C77.5087 9.07444 78.8147 8.73184 80.1423 8.41023L80.6132 10.354ZM72.9271 12.5279C71.6491 12.9436 70.3942 13.3802 69.162 13.8367L68.4671 11.9613C69.7247 11.4954 71.005 11.05 72.3084 10.626L72.9271 12.5279ZM65.4611 15.2955C64.2166 15.8162 62.9966 16.3579 61.8007 16.9195L60.9505 15.1092C62.1723 14.5354 63.4184 13.9822 64.6891 13.4504L65.4611 15.2955ZM58.2292 18.6925C57.044 19.3135 55.8839 19.9547 54.7486 20.615L53.7431 18.8862C54.9038 18.2111 56.0896 17.5556 57.301 16.9209L58.2292 18.6925ZM51.3421 22.6999C50.2136 23.426 49.1114 24.1715 48.0348 24.9351L46.8777 23.3039C47.9787 22.5229 49.106 21.7605 50.26 21.018L51.3421 22.6999ZM44.8379 27.3135C43.7839 28.1354 42.7565 28.9752 41.7551 29.8315L40.4553 28.3115C41.4793 27.4358 42.5301 26.5769 43.6081 25.7363L44.8379 27.3135ZM38.7822 32.4921C37.8045 33.4075 36.8539 34.3389 35.9297 35.285L34.499 33.8875C35.4437 32.9204 36.4156 31.9681 37.4153 31.0321L38.7822 32.4921ZM33.2056 38.1993C32.3143 39.1958 31.4501 40.206 30.6122 41.2283L29.0654 39.9605C29.9212 38.9163 30.8042 37.8842 31.715 36.866L33.2056 38.1993ZM28.1512 44.3646C27.3478 45.4342 26.5714 46.5149 25.8213 47.6048L24.1738 46.4709C24.9393 45.3586 25.7318 44.2555 26.5521 43.1635L28.1512 44.3646ZM23.6232 50.9419C22.9091 52.0752 22.2218 53.2164 21.5608 54.3638L19.8279 53.3653C20.5019 52.1955 21.2027 51.0317 21.9311 49.8756L23.6232 50.9419ZM19.6336 57.8633C19.0097 59.0497 18.4124 60.2404 17.8412 61.4336L16.0373 60.5699C16.6192 59.3545 17.2276 58.1413 17.8635 56.9324L19.6336 57.8633ZM16.1829 65.0678C15.6482 66.2989 15.1402 67.5303 14.6581 68.7599L12.7961 68.0298C13.2869 66.7782 13.804 65.5246 14.3485 64.2711L16.1829 65.0678ZM13.2661 72.5039C12.8194 73.7736 12.3997 75.0389 12.0059 76.2974L10.0971 75.7001C10.4978 74.4197 10.9249 73.1323 11.3795 71.8402L13.2661 72.5039ZM10.8777 80.1355C10.5193 81.4381 10.1884 82.7304 9.88394 84.0095L7.93829 83.5463C8.24811 82.2449 8.58475 80.9301 8.9494 79.6049L10.8777 80.1355ZM9.0264 87.9143C8.75891 89.2438 8.52008 90.5549 8.30853 91.8443L6.3349 91.5205C6.55032 90.2075 6.79346 88.8728 7.0657 87.5198L9.0264 87.9143ZM7.73514 95.7967C7.56409 97.1555 7.42416 98.4839 7.31357 99.7772L5.32083 99.6068C5.43375 98.2867 5.57648 96.9319 5.75079 95.5469L7.73514 95.7967ZM7.0585 103.768C7.03073 104.437 7.01126 105.094 6.99985 105.738L5.00015 105.702C5.01187 105.042 5.0318 104.37 5.06021 103.685L7.0585 103.768ZM7 105.72V107.677H5V105.72H7ZM7 111.591V115.505H5V111.591H7ZM7 119.419V123.333H5V119.419H7ZM7 127.247V131.161H5V127.247H7ZM7 135.075V138.989H5V135.075H7ZM7 142.903V146.817H5V142.903H7ZM7 150.731V154.645H5V150.731H7ZM7 158.559V162.473H5V158.559H7ZM7 166.387V170.301H5V166.387H7ZM7 174.215V178.129H5V174.215H7Z"
        fill="currentColor"
      />
    </svg>
  )
}

export default Works

const WorksCart = ({ colors, item }: { colors: any; item: any }) => {
  return (
    <div className="col-span-12 flex items-start">
      <div className="col-span-6">
        <div
          className={`rounded-full ${colors.bgPrimary} xl:w-72 lg:w-60 md:w-44 sm:w-32 w-20  xl:h-72 lg:h-60 md:h-44 sm:h-32 h-20`}
        />
      </div>
      <div className="col-span-6 my-auto xl:ml-11 lg:ml-9 md:ml-7 sm:ml-6 ml-5">
        <h1 className="xl:text-3xl lg:text-2xl md:text-xl sm:text-lg text-base font-bold text-gray-900">
          {item.name}{' '}
        </h1>
        <article className="mt-5 xl:text-lg md:text-base sm:text-sm text-xs text-gray-600">
          {item.description}
        </article>
      </div>
    </div>
  )
}
